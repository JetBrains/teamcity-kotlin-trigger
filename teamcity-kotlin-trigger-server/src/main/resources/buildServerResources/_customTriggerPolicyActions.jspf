<%@ page import="jetbrains.buildServer.buildTriggers.remote.controller.PolicyActionController" %>
<%@ page import="jetbrains.buildServer.buildTriggers.remote.controller.action.DeletePolicyAction" %>
<%@ page import="jetbrains.buildServer.buildTriggers.remote.controller.action.DisablePolicyAction" %>
<%@ page import="jetbrains.buildServer.buildTriggers.remote.controller.action.RemoveAccessTokenAction" %>

<%--
  ~ Copyright 2000-2020 JetBrains s.r.o.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  --%>

<script>
    BS.TriggerPolicy = {
        update: function (updatedPolicyName) {
            return BS.UploadTriggerDialog.open(updatedPolicyName);
        },

        setEnabled: function (triggerPolicyName, enable, hasUsages) {
            let action = enable ? 'Enable' : 'Disable'
            let changed = enable ? 'previously disabled' : 'enabled'
            let andTriggers = hasUsages ? ' and all its ' + changed + ' triggers ' : ''
            BS.confirmDialog.show({
                text: action + " this triggering policy" + andTriggers + "?",
                actionButtonText: action,
                cancelButtonText: 'Cancel',
                title: action + ' triggering policy',
                action: function () {
                    let completed = $j.Deferred();
                    BS.ajaxRequest(window["base_uri"] + '${PolicyActionController.PATH}', {
                        parameters: {
                            '${DisablePolicyAction.ACTION_KEY}': '${DisablePolicyAction.ACTION}',
                            triggerPolicyName,
                            enable,
                            projectId: '${project.externalId}'
                        },
                        onComplete: function () {
                            completed.resolve();
                            BS.reload(true);
                        }
                    });
                    return completed;
                }
            });
        },

        delete: function (policyName) {
            BS.confirmDialog.show({
                text: 'Delete "' + policyName + '" triggering policy?',
                actionButtonText: 'Delete',
                cancelButtonText: 'Cancel',
                title: 'Delete triggering policy',
                action: function () {
                    let completed = $j.Deferred();
                    BS.ajaxRequest(window["base_uri"] + '${PolicyActionController.PATH}', {
                        parameters: {
                            '${DeletePolicyAction.ACTION_KEY}': '${DeletePolicyAction.ACTION}',
                            policyName,
                            projectId: '${project.externalId}'
                        },
                        onComplete: function () {
                            completed.resolve();
                            BS.reload(true);
                        }
                    });
                    return completed;
                }
            });
        },

        assignToken: function (policyName) {
            return BS.AssignAccessTokenDialog.open(policyName);
        },

        removeToken: function (policyName) {
            BS.confirmDialog.show({
                text: 'Remove the assigned access token from "' + policyName + '" triggering policy?',
                actionButtonText: 'Remove',
                cancelButtonText: 'Cancel',
                title: 'Remove access token',
                action: function () {
                    let completed = $j.Deferred();
                    BS.ajaxRequest(window["base_uri"] + '${PolicyActionController.PATH}', {
                        parameters: {
                            '${RemoveAccessTokenAction.ACTION_KEY}': '${RemoveAccessTokenAction.ACTION}',
                            policyName,
                            projectId: '${project.externalId}'
                        },
                        onComplete: function () {
                            completed.resolve();
                            BS.reload(true);
                        }
                    });
                    return completed;
                }
            });
        }
    }
</script>